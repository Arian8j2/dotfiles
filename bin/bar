#!/bin/bash

black="#1c1e26"
green="#61ffca"
blue="#3fc6de"
cyan="#6be6e6"
orange="#ffca85"
purple="#946ee9"
red="#eb6f92"
pink="#cfc3fb"
delim="^d^  "

cpu() {
    percentage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print int (100 - $1)"%"}')
    printf "^c$orange^ %s$delim" "$percentage"
}

mem() {
    printf "^c$cyan^ %s$delim" "$(free -h | awk '/^Mem/ { print $3 }' | sed s/i//g)"
}

jalali_date() {
    printf "^c$blue^󰃭 %s$delim" "$(jdate "+%q %d %B")"
}

time_of_day() {
    printf "^c$green^󱑂 %s ^d^" "$(date "+%I:%M %p")"
}

gregorian_date() {
    printf "^c$cyan^󰃭 %s$delim" "$(date "+%A %d %B")"
}

battery() {
    local is_charging=$([ $(cat /sys/class/power_supply/BAT0/status) = "Charging" ] && echo " C")
	local percent=$(cat /sys/class/power_supply/BAT0/capacity)
	echo -n "$percent%$is_charging"
}

update_crypto_values() {
    CACHE_KEEP_TIME=2 # minute

    local now_time=$EPOCHSECONDS
    if [ $now_time -gt ${CACHE_INVALID_TIME:-0} ]; then
        API_QUERY='https://api.coingecko.com/api/v3/simple/price?ids=solana,tron,ethereum,bitcoin&vs_currencies=usd'
        api_result=$(curl -fSs -H 'Accpet: application/json' "$API_QUERY") || return 1
        SOL_PRICE=$(echo "$api_result" | jq .solana.usd)
        ETH_PRICE=$(echo "$api_result" | jq .ethereum.usd)
        BITCOIN_PRICE=$(echo "$api_result" | jq .bitcoin.usd)
        local tron_price=$(echo "$api_result" | jq .tron.usd)
        TRX_PRICE="${tron_price:0:-2}"

        nobitex_result=$(curl -fSs --compressed 'https://api.nobitex.ir/v2/orderbook/USDTIRT') || return 1
        local usdt_rial_price=$(echo "$nobitex_result" | jq '.bids.[0].[0] | tonumber')
        # sometimes nobitex returns null
        if [ -z "$usdt_rial_price" ]; then
            return 1
        fi
        local usdt_toman_price=$(($usdt_rial_price / 100))
        USDT_PRICE="${usdt_toman_price:0:-2}.${usdt_toman_price: -2}"
        ((CACHE_INVALID_TIME=$now_time + $CACHE_KEEP_TIME * 60))
    fi
}

crypto() {
    echo -n "^c$orange^BTC $BITCOIN_PRICE$delim^c$pink^ETH $ETH_PRICE$delim^c$red^TRX $TRX_PRICE$delim^c$green^USDT $USDT_PRICE$delim^c$purple^SOL $SOL_PRICE$delim"
}

controller_battery() {
    upower_object_path='/org/freedesktop/UPower/devices/gaming_input_dev_3C_FA_06_46_65_4F'
    local upower_result=$(upower -i "$upower_object_path")
    local percentage=$(echo "$upower_result" | grep -oP 'percentage:\s*\K(\d+)')

    if [ "$percentage" = "0" ]; then
        return;
    fi

    echo "^c$purple^  Controller $percentage%$delim"
}

while true; do
    update_crypto_values
	first_monitor="$(cpu)$(mem)$(jalali_date)$(time_of_day)"
    second_monitor="$(controller_battery)$(crypto)$(gregorian_date)$(time_of_day)"
	xsetroot -name "$first_monitor;$second_monitor" && sleep 2
done
